/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tela;

import QueryesPesonalizadas.QueryPagamento;
import QueryesPesonalizadas.QueryesCliente;
import QueryesPesonalizadas.QueryesFornecedor;
import java.awt.CardLayout;
import java.awt.event.KeyEvent;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.EntityManager;
import javax.persistence.RollbackException;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.MaskFormatter;
import modelos.Cliente;
import modelos.Factory;
import modelos.Fornecedor;
import modelos.Pagamento;
import modelos.Produto;

/**
 *
 * @author pedro
 */
public class CadastrarClientes extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    private static CadastrarClientes cd;
      public static CadastrarClientes getInstancia() {
        if (cd == null) {

            cd = new CadastrarClientes();
        }
        return cd;
    }
    public CadastrarClientes() {
        initComponents();
        setLocationRelativeTo(null);
        MaskFormatter cpf;
        try {
            cpf = new MaskFormatter("###.###.###-##");
            jtfCpfCnpj.setValue(null);
            jtfCpfCnpj.setFormatterFactory(new DefaultFormatterFactory(cpf));
            jRCpf.setSelected(true);
            jtfNomeCliente.grabFocus();
        } catch (ParseException ex) {
            Logger.getLogger(CadastrarClientes.class.getName()).log(Level.SEVERE, null, ex);
        }

        ImageIcon iconEmp = new ImageIcon("src/images/growthcode.png");
        iconEmp.setImage(iconEmp.getImage().getScaledInstance(391, 260, 1));
        jlbImgImp.setIcon(iconEmp);
        jtableCliente.setRowHeight(28);
    }
    Cliente cliente = new Cliente();
    Factory fac = new Factory();
    EntityManager em = fac.retornaEntidadegerenciada();

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        root = new javax.swing.JPanel();
        cadastrar = new javax.swing.JPanel();
        jtfNomeCliente = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jRCpf = new javax.swing.JRadioButton();
        jRCnpj = new javax.swing.JRadioButton();
        jtfCpfCnpj = new javax.swing.JFormattedTextField();
        jtfTelefone = new javax.swing.JFormattedTextField();
        jlbImgImp = new javax.swing.JLabel();
        jbtSalvar = new javax.swing.JButton();
        jbtPesquisar = new javax.swing.JButton();
        pesquisar = new javax.swing.JPanel();
        jbtVoltar = new javax.swing.JButton();
        jtfPesquisaPorCliente = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jbtExcluir = new javax.swing.JButton();
        jSrcolpaneInterno = new javax.swing.JScrollPane();
        jtableCliente = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        root.setLayout(new java.awt.CardLayout());

        jtfNomeCliente.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 18)); // NOI18N
        jtfNomeCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtfNomeClienteKeyPressed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 18)); // NOI18N
        jLabel4.setText("Nome do Cliente:");

        jLabel5.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 18)); // NOI18N
        jLabel5.setText("Contato:");

        jRCpf.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 18)); // NOI18N
        jRCpf.setText("CPF");
        jRCpf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRCpfActionPerformed(evt);
            }
        });

        jRCnpj.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 18)); // NOI18N
        jRCnpj.setText("CNPJ");
        jRCnpj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRCnpjActionPerformed(evt);
            }
        });

        jtfCpfCnpj.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 18)); // NOI18N

        try {
            jtfTelefone.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("(##)  #####-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jtfTelefone.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 18)); // NOI18N

        jbtSalvar.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 18)); // NOI18N
        jbtSalvar.setText("Salvar");
        jbtSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtSalvarActionPerformed(evt);
            }
        });
        jbtSalvar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jbtSalvarKeyPressed(evt);
            }
        });

        jbtPesquisar.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 18)); // NOI18N
        jbtPesquisar.setText("Pesquisar");
        jbtPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtPesquisarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout cadastrarLayout = new javax.swing.GroupLayout(cadastrar);
        cadastrar.setLayout(cadastrarLayout);
        cadastrarLayout.setHorizontalGroup(
            cadastrarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cadastrarLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(cadastrarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(cadastrarLayout.createSequentialGroup()
                        .addComponent(jtfNomeCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 445, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jtfTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel4)
                    .addGroup(cadastrarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(cadastrarLayout.createSequentialGroup()
                            .addComponent(jbtPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(26, 26, 26)
                            .addComponent(jlbImgImp, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(26, 26, 26)
                            .addComponent(jbtSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, cadastrarLayout.createSequentialGroup()
                            .addGroup(cadastrarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jtfCpfCnpj, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(cadastrarLayout.createSequentialGroup()
                                    .addComponent(jRCpf, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jRCnpj)))
                            .addGap(94, 94, 94)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(182, 182, 182))))
                .addContainerGap(76, Short.MAX_VALUE))
        );
        cadastrarLayout.setVerticalGroup(
            cadastrarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cadastrarLayout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(cadastrarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(cadastrarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfNomeCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(cadastrarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRCpf)
                    .addComponent(jRCnpj))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtfCpfCnpj, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addGroup(cadastrarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, cadastrarLayout.createSequentialGroup()
                        .addComponent(jbtSalvar)
                        .addGap(82, 82, 82))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, cadastrarLayout.createSequentialGroup()
                        .addComponent(jbtPesquisar)
                        .addGap(83, 83, 83))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, cadastrarLayout.createSequentialGroup()
                        .addComponent(jlbImgImp, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40))))
        );

        root.add(cadastrar, "cadastrar");

        jbtVoltar.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 18)); // NOI18N
        jbtVoltar.setText("Voltar");
        jbtVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtVoltarActionPerformed(evt);
            }
        });

        jtfPesquisaPorCliente.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 18)); // NOI18N
        jtfPesquisaPorCliente.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtfPesquisaPorClienteFocusGained(evt);
            }
        });
        jtfPesquisaPorCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtfPesquisaPorClienteKeyPressed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 18)); // NOI18N
        jLabel1.setText("Pesquisa por nome do cliente:");

        jbtExcluir.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 18)); // NOI18N
        jbtExcluir.setText("Excluir");
        jbtExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtExcluirActionPerformed(evt);
            }
        });

        jSrcolpaneInterno.setBackground(new java.awt.Color(102, 102, 255));
        jSrcolpaneInterno.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jSrcolpaneInterno.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jSrcolpaneInterno.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 18)); // NOI18N

        jtableCliente.setAutoCreateRowSorter(true);
        jtableCliente.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 15)); // NOI18N
        jtableCliente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo", "Nome do Cliente", "Cpf/cnpj", "Contato"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtableCliente.setDoubleBuffered(true);
        jtableCliente.setDragEnabled(true);
        jtableCliente.setFillsViewportHeight(true);
        jtableCliente.setFocusCycleRoot(true);
        jtableCliente.setFocusTraversalPolicyProvider(true);
        jtableCliente.setGridColor(new java.awt.Color(0, 51, 255));
        jtableCliente.setInheritsPopupMenu(true);
        jtableCliente.setSurrendersFocusOnKeystroke(true);
        jtableCliente.getTableHeader().setReorderingAllowed(false);
        jtableCliente.addHierarchyListener(new java.awt.event.HierarchyListener() {
            public void hierarchyChanged(java.awt.event.HierarchyEvent evt) {
                jtableClienteHierarchyChanged(evt);
            }
        });
        jtableCliente.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtableClienteFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtableClienteFocusLost(evt);
            }
        });
        jtableCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtableClienteKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtableClienteKeyReleased(evt);
            }
        });
        jSrcolpaneInterno.setViewportView(jtableCliente);
        if (jtableCliente.getColumnModel().getColumnCount() > 0) {
            jtableCliente.getColumnModel().getColumn(0).setResizable(false);
            jtableCliente.getColumnModel().getColumn(0).setPreferredWidth(30);
            jtableCliente.getColumnModel().getColumn(1).setResizable(false);
            jtableCliente.getColumnModel().getColumn(1).setPreferredWidth(230);
            jtableCliente.getColumnModel().getColumn(3).setPreferredWidth(90);
        }

        javax.swing.GroupLayout pesquisarLayout = new javax.swing.GroupLayout(pesquisar);
        pesquisar.setLayout(pesquisarLayout);
        pesquisarLayout.setHorizontalGroup(
            pesquisarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pesquisarLayout.createSequentialGroup()
                .addContainerGap(73, Short.MAX_VALUE)
                .addGroup(pesquisarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(pesquisarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jtfPesquisaPorCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 731, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(pesquisarLayout.createSequentialGroup()
                            .addComponent(jbtExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jbtVoltar, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(54, 54, 54))
            .addGroup(pesquisarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pesquisarLayout.createSequentialGroup()
                    .addGap(74, 74, 74)
                    .addComponent(jSrcolpaneInterno, javax.swing.GroupLayout.PREFERRED_SIZE, 731, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(53, Short.MAX_VALUE)))
        );
        pesquisarLayout.setVerticalGroup(
            pesquisarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pesquisarLayout.createSequentialGroup()
                .addContainerGap(39, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jtfPesquisaPorCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(320, 320, 320)
                .addGroup(pesquisarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtVoltar)
                    .addComponent(jbtExcluir))
                .addGap(80, 80, 80))
            .addGroup(pesquisarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pesquisarLayout.createSequentialGroup()
                    .addGap(131, 131, 131)
                    .addComponent(jSrcolpaneInterno, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(131, Short.MAX_VALUE)))
        );

        root.add(pesquisar, "editar");

        getContentPane().add(root, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jtfNomeClienteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfNomeClienteKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

        }
    }//GEN-LAST:event_jtfNomeClienteKeyPressed

    private void jRCpfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRCpfActionPerformed
        MaskFormatter cpf;
        try {
            cpf = new MaskFormatter("###.###.###-##");
            jtfCpfCnpj.setValue(null);
            jtfCpfCnpj.setFormatterFactory(new DefaultFormatterFactory(cpf));
            jRCnpj.setSelected(false);
            jtfCpfCnpj.grabFocus();
        } catch (ParseException ex) {
            Logger.getLogger(CadastrarClientes.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jRCpfActionPerformed

    private void jRCnpjActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRCnpjActionPerformed
        MaskFormatter cnpj;
        try {
            cnpj = new MaskFormatter("##.###.###/####-##");
            jtfCpfCnpj.setValue(null);
            jtfCpfCnpj.setFormatterFactory(new DefaultFormatterFactory(cnpj));
            jRCpf.setSelected(false);
            jtfCpfCnpj.grabFocus();

        } catch (ParseException ex) {
            Logger.getLogger(CadastrarClientes.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jRCnpjActionPerformed

    private void jbtSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtSalvarActionPerformed

        cadastrar();
    }//GEN-LAST:event_jbtSalvarActionPerformed

    private void jbtSalvarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jbtSalvarKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            cadastrar();
        }
    }//GEN-LAST:event_jbtSalvarKeyPressed

    private void jbtPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtPesquisarActionPerformed
        CardLayout card = (CardLayout) root.getLayout();
        card.show(root, "editar");

    }//GEN-LAST:event_jbtPesquisarActionPerformed

    private void jbtVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtVoltarActionPerformed
        CardLayout card = (CardLayout) root.getLayout();
        card.show(root, "cadastrar");
    }//GEN-LAST:event_jbtVoltarActionPerformed

    private void jtableClienteHierarchyChanged(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_jtableClienteHierarchyChanged

    }//GEN-LAST:event_jtableClienteHierarchyChanged

    private void jtableClienteFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtableClienteFocusGained

    }//GEN-LAST:event_jtableClienteFocusGained

    private void jtableClienteFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtableClienteFocusLost

    }//GEN-LAST:event_jtableClienteFocusLost

    private void jtableClienteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtableClienteKeyPressed

    }//GEN-LAST:event_jtableClienteKeyPressed

    private void jtableClienteKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtableClienteKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            int linha = jtableCliente.getSelectedRow();
            int coluna = jtableCliente.getSelectedColumn();
            editarCliente(linha, coluna);

        }
    }//GEN-LAST:event_jtableClienteKeyReleased

    private void jtfPesquisaPorClienteFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfPesquisaPorClienteFocusGained
        if (jtableCliente.isEditing()) {
           jtableCliente.getCellEditor().stopCellEditing();
        }
    }//GEN-LAST:event_jtfPesquisaPorClienteFocusGained

    private void jtfPesquisaPorClienteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfPesquisaPorClienteKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            List<Cliente> lista = new ArrayList<>();
            lista = pesquisaPorNome(jtfPesquisaPorCliente.getText());

            DefaultTableModel dtm = (DefaultTableModel) jtableCliente.getModel();
            for (int i = jtableCliente.getRowCount() - 1; i >= 0; i--) {
                dtm.removeRow(i);
            }
            for (int i = 0; i < lista.size(); i++) {
                dtm.addRow(new Object[]{
                    lista.get(i).getId_cliente(),
                    lista.get(i).getNome_cliente(),
                    lista.get(i).getCpf_cliente(),
                    lista.get(i).getTelefone(),
                   
                   

                });

            }

        }
    }//GEN-LAST:event_jtfPesquisaPorClienteKeyPressed

    private void jbtExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtExcluirActionPerformed
        try {

            int linha = jtableCliente.getSelectedRow();

            int id = Integer.parseInt(jtableCliente.getValueAt(linha, 0).toString());

           Cliente c=  em.find(Cliente.class, id);
            int resposta = JOptionPane.showConfirmDialog(null, "Deseja realmente Excluir o Cliente?", "Janela de confirmação", JOptionPane.YES_NO_OPTION);
            if (resposta == JOptionPane.YES_OPTION) {
                em.getTransaction().begin();
                em.remove(c);
                em.getTransaction().commit();
                JOptionPane.showMessageDialog(null, "Cliente Excluido com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
                DefaultTableModel dtm = (DefaultTableModel) jtableCliente.getModel();

                dtm.removeRow(linha);
                jtfPesquisaPorCliente.grabFocus();
                jtfPesquisaPorCliente.setText("");
            }
            if (resposta == JOptionPane.NO_OPTION) {
                jtfPesquisaPorCliente.grabFocus();
                jtfPesquisaPorCliente.selectAll();
            }

        } catch (IndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(null, "Nenhum Cliente selecionado", "Erro", JOptionPane.ERROR_MESSAGE);
            jtfPesquisaPorCliente.grabFocus();
            jtfPesquisaPorCliente.selectAll();
        }
    }//GEN-LAST:event_jbtExcluirActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CadastrarClientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CadastrarClientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CadastrarClientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CadastrarClientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CadastrarClientes().setVisible(true);
            }
        });
    }

    public void cadastrar() {
        int x = 0;

       cliente.setNome_cliente(jtfNomeCliente.getText());
       cliente.setCpf_cliente(jtfCpfCnpj.getText());
       cliente.setTelefone(jtfTelefone.getText());

        if (jtfNomeCliente.getText().length() <= 0 || jtfCpfCnpj.getText().length() <= 0 || jtfTelefone.getText().length() <= 0) {
            JOptionPane.showMessageDialog(null, "Tente corrigir os valores dos campos de acordo com o que se pede!", "Alerta!", JOptionPane.WARNING_MESSAGE);

        } else {

            try {
                em.getTransaction().begin();
                em.persist(cliente);
                em.getTransaction().commit();
                limparCampos();
                JOptionPane.showMessageDialog(null, "Cliente Criado com Sucesso!", "alerta", JOptionPane.INFORMATION_MESSAGE);
                em.clear();

                jtfNomeCliente.grabFocus();

                cliente = new Cliente();

            } catch (RollbackException e) {

                JOptionPane.showMessageDialog(null, "Não é possivel cadastrar Clientes com  descrição Iguais ", "alerta", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    public void editarCliente(int linha, int coluna) {

        String conteudo = jtableCliente.getValueAt(linha, coluna) + "";
        Cliente c = new Cliente();
        c.setId_cliente(Integer.parseInt(jtableCliente.getValueAt(linha,0).toString()));
        c.setNome_cliente(jtableCliente.getValueAt(linha, 1).toString());
        c.setCpf_cliente(jtableCliente.getValueAt(linha, 2).toString());
        c.setTelefone(jtableCliente.getValueAt(linha, 3).toString());

        try {

            int resposta = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar este Cliente?", "Janela de Confimação", JOptionPane.YES_NO_OPTION);
            if (resposta == JOptionPane.NO_OPTION) {
                prencherPorId(c);
                jtfPesquisaPorCliente.grabFocus();
                jtfPesquisaPorCliente.selectAll();
            }
            if (resposta == JOptionPane.YES_OPTION) {
                em.getTransaction().begin();
                em.merge(c);
                em.getTransaction().commit();

                JOptionPane.showMessageDialog(null, "Cliente editado com Sucesso!", "Alerta", JOptionPane.INFORMATION_MESSAGE);
                prencherPorId(c);
                jtfPesquisaPorCliente.grabFocus();
                jtfPesquisaPorCliente.selectAll();
            }

        } catch (RollbackException e) {
            JOptionPane.showMessageDialog(null, "Houve um erro na tentativa de edição!");
            jtfPesquisaPorCliente.grabFocus();
        }
    }

    public void limparCampos() {
       
        jtfTelefone.setText("");
        jtfCpfCnpj.setText("");
        jtfNomeCliente.setText("");
    }

    public void prencherPorId(Cliente c) {
        c = em.find(Cliente.class, c.getId_cliente());
        DefaultTableModel dtm = (DefaultTableModel) jtableCliente.getModel();
        dtm.setNumRows(0);
        dtm.addRow(new Object[]{
            c.getId_cliente(),
            c.getNome_cliente(),
            c.getCpf_cliente(),
            c.getTelefone()
        });
    }
    public List<Cliente> pesquisaPorNome(String nome) {
        QueryesCliente qc = new QueryesCliente();
       return qc.retornaClientePorNome(nome);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JPanel cadastrar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JRadioButton jRCnpj;
    private javax.swing.JRadioButton jRCpf;
    private javax.swing.JScrollPane jSrcolpaneInterno;
    private javax.swing.JButton jbtExcluir;
    private javax.swing.JButton jbtPesquisar;
    private javax.swing.JButton jbtSalvar;
    private javax.swing.JButton jbtVoltar;
    private javax.swing.JLabel jlbImgImp;
    private javax.swing.JTable jtableCliente;
    private javax.swing.JFormattedTextField jtfCpfCnpj;
    private javax.swing.JTextField jtfNomeCliente;
    private javax.swing.JTextField jtfPesquisaPorCliente;
    private javax.swing.JFormattedTextField jtfTelefone;
    private javax.swing.JPanel pesquisar;
    private javax.swing.JPanel root;
    // End of variables declaration//GEN-END:variables
}
